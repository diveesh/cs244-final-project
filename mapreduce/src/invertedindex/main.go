package main

import (
	mr "mapreduce"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input. In this
// framework, the key is the name of the file that is being processed, and the
// value is the file's contents. The return value should be a slice of key/value
// pairs, each represented by a mapreduce.KeyValue.
func mapF(fileName string, contents string) (res []mr.KeyValue) {
	fieldsFn := func(char rune) bool {
		return !unicode.IsLetter(char)
	}

	res = make([]mr.KeyValue, 0)
	for _, word := range strings.FieldsFunc(contents, fieldsFn) {
		res = append(res, mr.KeyValue{word, fileName})
	}
	return
}

// The reduce function is called once for each key generated by Map, with a list
// of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	fileNameMap := make(map[string]bool)
	uniqueFileNames := make([]string, 0)

	for _, fileName := range values {
		if !fileNameMap[fileName] {
			fileNameMap[fileName] = true
			uniqueFileNames = append(uniqueFileNames, fileName)
		}
	}

	return strconv.Itoa(len(uniqueFileNames)) + " " + strings.Join(uniqueFileNames, ",")
}

// Parses the command line arguments and runs the computation. "Running the
// computation" could mean that this node is a worker or a master, depending on
// the command line flags. See `mr/parse_cmd_line.go:parseCmdLine` for details.
func main() {
	mr.Run("invertedindex", mapF, reduceF)
}
